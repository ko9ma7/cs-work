import java.util.*;

/*
	p2.java	
	Tim Sprunger
	August 28, 2019
	calculates primes using Sieve of Eratosthenes and demonstrates command line arguments
	and methods

	1.
	
	2.  Printing is the main factor limiting the performance of the program.  
	  	This is easily shown because if you enter an argument with a very large
	  	number, it is completed almost instantly with the print statement taken
	  	out. Therefore, basically, the only factor that was making the program 
	  	take a very long time to execute with large numbers was because of the 
	  	printing of hundreds of prime numbers.
	
	3.  The main factor that prevents this program from finding larger prime numbers
		is the variable type that is used for scanner input and command line input.  
		The program reaches its limit when the maximum number for the int variable 
		type in java.
*/

public class p2{
	public static void main(String[] args){
		Scanner scnr = new Scanner(System.in);
		int num = 0;

		if (args.length > 0){
			num = Integer.parseInt(args[0]);
		}
		else{
			System.out.print("Enter Maximum Value:");			
			num = scnr.nextInt();	
		}
		
		showPrimes(num);
		scnr.close();
	}


	public static void showPrimes(int N){
		boolean primeCheck[] = new boolean[N+1];
		primeCheck[0] = false;
		primeCheck[1] = false;
		
		for (int x=2; x<(primeCheck.length); x++){
			primeCheck[x] = true;
		}
			
		for (int i=2; i<=( Math.sqrt(N) ); i++){
			if (primeCheck[i]){
				for (int j=(i*i); j<=N; j+=i){
					primeCheck[j] = false;						
				}
			}
		}
		
		for (int z=2; z<=N; z++){
			if (primeCheck[z]){
//				System.out.println(z);
			}
		}
	} 
}